{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/robots.js","components/Scroll.js","components/Searchbox.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","id","name","email","className","alt","src","Cardlist","robots","map","user","i","Card","key","username","Scroll","props","style","overflowY","height","children","Searchbox","searchfield","searchchange","type","placeholder","onChange","App","onsearchchange","event","setState","target","value","state","filterrobots","filter","toLowerCase","includes","length","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAZH,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MACnB,OACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAI,SAAQC,IAAG,+BAA0BL,KAC9C,6BACG,4BAAKC,GACL,2BAAIC,MCaCI,EAnBC,SAAC,GAChB,IADiBC,EAClB,EADkBA,OAGjB,OACC,6BACAA,EAAOC,KAAI,SAACC,EAAKC,GAEjB,OACC,kBAACC,EAAD,CAAMC,IAAKF,EACXV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,WAPlB,MCPWK,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,cACNY,SAAU,OACVX,MAAO,mCAET,CACEF,GAAI,EACJC,KAAM,YACNY,SAAU,YACVX,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,cACNY,SAAU,WACVX,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,eACNY,SAAU,WACVX,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,SACNY,SAAU,SACVX,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,cACNY,SAAU,mBACVX,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,UACNY,SAAU,eACVX,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,UACNY,SAAU,gBACVX,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,iBACNY,SAAU,WACVX,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,UACNY,SAAU,iBACVX,MAAO,0BAER,CACCF,GAAI,GACJC,KAAM,aACNY,SAAU,iBACVX,MAAO,sBCrDIY,EAVF,SAACC,GAEb,OACA,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,UACvCH,EAAMI,SADP,MCMeC,EATG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACC,6BACQ,2BAAOnB,UAAU,sCAAqCoB,KAAK,SAASC,YAAY,gBAAeC,SAAUH,MCmCrGI,G,wDA7Bd,aACC,IAAD,8BACC,gBAMAC,eAAe,SAACC,GAEhB,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAP1C,EAAKC,MAAM,CACVzB,OAAO,CAACA,UACRc,YAAY,IAJd,E,qDAYS,IAAD,OAEDY,EAAa1B,EAAO2B,QAAO,SAAA3B,GAChC,OAAOA,EAAON,KAAKkC,cAAcC,SAAS,EAAKJ,MAAMX,YAAYc,kBAElE,OAAQ5B,EAAO8B,OAEL,yBAAKlC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAcgB,KAAKX,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAQ0B,MAL7B,2C,GArBeM,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACN,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1f9c5159.chunk.js","sourcesContent":["import React from  'react';\r\n\r\n\r\nconst card= ({id,name,email})=>{\r\n   return(\r\n\t    <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-s\">\r\n\t      <img alt='robots'src={`https://robohash.org/${id}`}/>\r\n\t      <div>\r\n\t         <h2>{name}</h2>\r\n\t         <p>{email}</p>\r\n\r\n\t      </div>\r\n\t    </div>\r\n\t);\r\n}\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist =({robots})=>\r\n{\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t{robots.map((user,i)=>\r\n\t  {\r\n\t\treturn (\r\n\t\t\t<Card key={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>\r\n\t\t\t);\r\n\t   })\r\n    };\r\n\t\t</div>\r\n\t\t);\r\n           \r\n}\r\nexport default Cardlist;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Karthikeyan',\r\n    username: 'Bret',\r\n    email: 'karthikchandrsekar@stevecorp.io'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Renuchand',\r\n    username: 'Antonette',\r\n    email: 'renurocket@stevemedia.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Kicha maama',\r\n    username: 'Samantha',\r\n    email: 'mohanakrish@stevecorp.io'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Dinesh Kumar',\r\n    username: 'Karianne',\r\n    email: 'sdkironman@stevepower.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Lokesh',\r\n    username: 'Kamren',\r\n    email: 'lokesh.v@steveclouds.io'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Manjunathar',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'bijiliramesh@dubakoor.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Revathi',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'revathiDLS@stevetrust.in'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Deepthi',\r\n    username: 'Maxime_Nienow',\r\n    email: 'DeepthiDLS@stevetrust.in'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Shabana kafoor',\r\n    username: 'Delphine',\r\n    email: 'singapenne@stevecorp.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'lingesh',\r\n    username: 'Moriah.Stanton',\r\n    email: 'lingaFS@stevefamily.io'\r\n  },\r\n   {\r\n    id: 15,\r\n    name: 'kathivelan',\r\n    username: 'Moriah.Stanton',\r\n    email: 'katir@dubakoor.io'\r\n  }\r\n];","import React from'react';\r\n\r\nconst Scroll=(props)=>\r\n{\r\n\treturn(\r\n\t<div style={{overflowY: 'Scroll',height:'800px'}}>\r\n\t{props.children};\r\n\t</div>\r\n\t);\r\n\t\r\n\r\n};\r\nexport default Scroll;"," import React from'react';\r\n\r\n const Searchbox = ({searchfield,searchchange})=>{\r\n \treturn(\r\n \t\t<div >\r\n           <input className='tc pa4 ba b--green bg-lightest-blue'type='search' placeholder='search robots'onChange={searchchange}/>\r\n \t\t\r\n \t\t</div>\r\n \t\t);\r\n\r\n }\r\n export default Searchbox;","import React,{Component} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport {robots} from '../components/robots';\r\nimport Scroll from '../components/Scroll';\r\nimport Searchbox from'../components/Searchbox';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots:{robots},\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\t\tonsearchchange=(event)=>\r\n\t{\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\t\r\n\t\tconst filterrobots=robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length?\r\n\t\t <h1>Loading</h1>:\r\n\t\t          <div className='tc'>\r\n\t\t           <h1 className='f1'>RoboFriends</h1>\r\n\t\t           <Searchbox searchchange={this.onsearchchange}/>\r\n\t\t           <Scroll>\r\n\t\t            <Cardlist robots={filterrobots}/>\r\n\t\t           </Scroll>\r\n\t\t          </div>\r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\n\r\n//import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n   <App/>\r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}